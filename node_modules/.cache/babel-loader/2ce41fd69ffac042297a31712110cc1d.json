{"ast":null,"code":"var _jsxFileName = \"/Users/faribadadko/Documents/FunWear\\uD83C\\uDF3CFashion/funwear-front-end/src/components/Products.js\";\nimport React, { Component } from 'react';\nimport formatCurrency from '../util';\nimport Fade from 'react-reveal/Fade';\nimport Modal from 'react-modal';\nimport Zoom from 'react-reveal/Zoom';\nimport { connect } from 'react-redux';\nimport { fetchProducts } from '../actions/productActions'; //for modals we need to have 2 state show or hide\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Products extends Component {\n  constructor(props) {\n    super(props);\n\n    this.openModal = product => {\n      this.setState({\n        product\n      }); //by running this we set as the product of the stat of the component\n    };\n\n    this.closeModal = () => {\n      this.setState({\n        product: null\n      });\n    };\n\n    this.state = {\n      product: null //if product exists show it else if null do not show modal\n      //create an onClick for image === HAS TO BE AN ARROW FUNC\n      //openModal takes parameter (product) and prefix with this\n      //we need a method function openModal\n\n    };\n  }\n\n  componentDidMount() {\n    this.props.fetchProducts();\n  }\n\n  render() {\n    const {\n      product\n    } = this.state; //use constructor assignment\n\n    return (\n      /*#__PURE__*/\n      //implement product list - arr - map method\n      _jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Fade, {\n          bottom: true,\n          cascade: true,\n          children: !this.props.products ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"Loading...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 13\n          }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n            className: \"products\",\n            children: this.props.products.map(product =>\n            /*#__PURE__*/\n            // //get list of products as props from parent comp\n            _jsxDEV(\"li\", {\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"product\",\n                children: [/*#__PURE__*/_jsxDEV(\"a\", {\n                  href: '#' + product._id,\n                  onClick: () => this.openModal(product),\n                  children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                    src: product.image,\n                    alt: product.title\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 49,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: product.title\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 50,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 45,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"product-price\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    children: formatCurrency(product.price)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 53,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"button-primary\",\n                    onClick: () => this.props.addToCart(product),\n                    className: \"button primary\",\n                    children: \"Add To Cart\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 54,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 52,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 44,\n                columnNumber: 19\n              }, this)\n            }, product._id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 9\n        }, this), product &&\n        /*#__PURE__*/\n        //when there's a product this modal is rendered ** also make sure to create a button to close it using 'x'\n        _jsxDEV(Modal, {\n          isOpen: true,\n          onRequestClose: this.closeModal,\n          children: /*#__PURE__*/_jsxDEV(Zoom, {\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"close-modal\",\n              onClick: this.closeModal,\n              children: \"x\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"product-details\",\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: product.image,\n                alt: product.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 75,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"product-details-description\",\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: product.title\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 78,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 77,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: product.description\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 81,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"Available Sizes:\", ' ', product.availableSizes.map(x =>\n                  /*#__PURE__*/\n                  //availableSizes is an array\n                  _jsxDEV(\"span\", {\n                    children: [' ', /*#__PURE__*/_jsxDEV(\"button\", {\n                      className: \"button\",\n                      children: x\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 88,\n                      columnNumber: 27\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 86,\n                    columnNumber: 25\n                  }, this))]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 83,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"product-price\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    children: formatCurrency(product.price)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 94,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"button primary\",\n                    onClick: () => {\n                      //before closingModal make sure have this.props.addToCart method\n                      this.props.addToCart(product);\n                      this.closeModal();\n                    },\n                    children: \"Add To Cart\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 95,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 93,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 76,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 7\n      }, this)\n    );\n  }\n\n}\n\nexport default connect(state => ({\n  products: state.products.items\n}), {\n  fetchProducts\n})(Products); //TO CONNECT PRODUCTS.JS TO STORE\n//CONNECT FUNCTION defines","map":{"version":3,"sources":["/Users/faribadadko/Documents/FunWearðŸŒ¼Fashion/funwear-front-end/src/components/Products.js"],"names":["React","Component","formatCurrency","Fade","Modal","Zoom","connect","fetchProducts","Products","constructor","props","openModal","product","setState","closeModal","state","componentDidMount","render","products","map","_id","image","title","price","addToCart","description","availableSizes","x","items"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,cAAP,MAA2B,SAA3B;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,aAAT,QAA8B,2BAA9B,C,CAEA;;;;AACA,MAAMC,QAAN,SAAuBP,SAAvB,CAAiC;AAC/BQ,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAanBC,SAbmB,GAaNC,OAAD,IAAa;AACvB,WAAKC,QAAL,CAAc;AAAED,QAAAA;AAAF,OAAd,EADuB,CAEvB;AACD,KAhBkB;;AAAA,SAiBnBE,UAjBmB,GAiBN,MAAM;AACjB,WAAKD,QAAL,CAAc;AAAED,QAAAA,OAAO,EAAE;AAAX,OAAd;AACD,KAnBkB;;AAEjB,SAAKG,KAAL,GAAa;AACXH,MAAAA,OAAO,EAAE,IADE,CAEX;AACA;AACA;AACA;;AALW,KAAb;AAOD;;AACDI,EAAAA,iBAAiB,GAAE;AACjB,SAAKN,KAAL,CAAWH,aAAX;AACD;;AAQDU,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEL,MAAAA;AAAF,QAAc,KAAKG,KAAzB,CADO,CACyB;;AAChC;AAAA;AACE;AACA;AAAA,gCACE,QAAC,IAAD;AAAM,UAAA,MAAM,MAAZ;AAAa,UAAA,OAAO,EAAE,IAAtB;AAAA,oBACG,CAAC,KAAKL,KAAL,CAAWQ,QAAZ,gBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADD,gBAGC;AAAI,YAAA,SAAS,EAAC,UAAd;AAAA,sBACG,KAAKR,KAAL,CAAWQ,QAAX,CAAoBC,GAApB,CAAyBP,OAAD;AAAA;AACvB;AACA;AAAA,qCACE;AAAK,gBAAA,SAAS,EAAC,SAAf;AAAA,wCACE;AACE,kBAAA,IAAI,EAAE,MAAMA,OAAO,CAACQ,GADtB;AAEE,kBAAA,OAAO,EAAE,MAAM,KAAKT,SAAL,CAAeC,OAAf,CAFjB;AAAA,0CAIE;AAAK,oBAAA,GAAG,EAAEA,OAAO,CAACS,KAAlB;AAAyB,oBAAA,GAAG,EAAET,OAAO,CAACU;AAAtC;AAAA;AAAA;AAAA;AAAA,0BAJF,eAKE;AAAA,8BAAIV,OAAO,CAACU;AAAZ;AAAA;AAAA;AAAA;AAAA,0BALF;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,eAQE;AAAK,kBAAA,SAAS,EAAC,eAAf;AAAA,0CACE;AAAA,8BAAMpB,cAAc,CAACU,OAAO,CAACW,KAAT;AAApB;AAAA;AAAA;AAAA;AAAA,0BADF,eAEE;AACE,oBAAA,SAAS,EAAC,gBADZ;AAEE,oBAAA,OAAO,EAAE,MAAM,KAAKb,KAAL,CAAWc,SAAX,CAAqBZ,OAArB,CAFjB;AAGE,oBAAA,SAAS,EAAC,gBAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAFF;AAAA;AAAA;AAAA;AAAA;AAAA,wBARF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,eAASA,OAAO,CAACQ,GAAjB;AAAA;AAAA;AAAA;AAAA,oBAFD;AADH;AAAA;AAAA;AAAA;AAAA;AAJJ;AAAA;AAAA;AAAA;AAAA,gBADF,EAiCGR,OAAO;AAAA;AAAM;AACZ,gBAAC,KAAD;AAAO,UAAA,MAAM,EAAE,IAAf;AAAqB,UAAA,cAAc,EAAE,KAAKE,UAA1C;AAAA,iCACE,QAAC,IAAD;AAAA,oCACE;AAAQ,cAAA,SAAS,EAAC,aAAlB;AAAgC,cAAA,OAAO,EAAE,KAAKA,UAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAIE;AAAK,cAAA,SAAS,EAAC,iBAAf;AAAA,sCACE;AAAK,gBAAA,GAAG,EAAEF,OAAO,CAACS,KAAlB;AAAyB,gBAAA,GAAG,EAAET,OAAO,CAACU;AAAtC;AAAA;AAAA;AAAA;AAAA,sBADF,eAEE;AAAK,gBAAA,SAAS,EAAC,6BAAf;AAAA,wCACE;AAAA,yCACE;AAAA,8BAASV,OAAO,CAACU;AAAjB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,wBADF,eAKE;AAAA,4BAAIV,OAAO,CAACa;AAAZ;AAAA;AAAA;AAAA;AAAA,wBALF,eAOE;AAAA,iDACmB,GADnB,EAEGb,OAAO,CAACc,cAAR,CAAuBP,GAAvB,CAA4BQ,CAAD;AAAA;AAAO;AAC/B;AAAA,+BACG,GADH,eAEE;AAAQ,sBAAA,SAAS,EAAC,QAAlB;AAAA,gCAA4BA;AAA5B;AAAA;AAAA;AAAA;AAAA,4BAFF;AAAA;AAAA;AAAA;AAAA;AAAA,0BADH,CAFH;AAAA;AAAA;AAAA;AAAA;AAAA,wBAPF,eAiBE;AAAK,kBAAA,SAAS,EAAC,eAAf;AAAA,0CACE;AAAA,8BAAMzB,cAAc,CAACU,OAAO,CAACW,KAAT;AAApB;AAAA;AAAA;AAAA;AAAA,0BADF,eAEE;AACE,oBAAA,SAAS,EAAC,gBADZ;AAEE,oBAAA,OAAO,EAAE,MAAM;AACb;AACA,2BAAKb,KAAL,CAAWc,SAAX,CAAqBZ,OAArB;AACA,2BAAKE,UAAL;AACD,qBANH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAFF;AAAA;AAAA;AAAA;AAAA;AAAA,wBAjBF;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAlCJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAFF;AAgFD;;AAvG8B;;AAyGjC,eAAeR,OAAO,CAAES,KAAD,KAAY;AAAEG,EAAAA,QAAQ,EAAEH,KAAK,CAACG,QAAN,CAAeU;AAA3B,CAAZ,CAAD,EAAkD;AACtErB,EAAAA;AADsE,CAAlD,CAAP,CAEZC,QAFY,CAAf,C,CAIA;AACA","sourcesContent":["import React, { Component } from 'react';\nimport formatCurrency from '../util';\nimport Fade from 'react-reveal/Fade';\nimport Modal from 'react-modal';\nimport Zoom from 'react-reveal/Zoom';\nimport { connect } from 'react-redux';\nimport { fetchProducts } from '../actions/productActions';\n\n//for modals we need to have 2 state show or hide\nclass Products extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      product: null,\n      //if product exists show it else if null do not show modal\n      //create an onClick for image === HAS TO BE AN ARROW FUNC\n      //openModal takes parameter (product) and prefix with this\n      //we need a method function openModal\n    };\n  }\n  componentDidMount(){\n    this.props.fetchProducts();\n  }\n  openModal = (product) => {\n    this.setState({ product });\n    //by running this we set as the product of the stat of the component\n  };\n  closeModal = () => {\n    this.setState({ product: null });\n  };\n  render() {\n    const { product } = this.state; //use constructor assignment\n    return (\n      //implement product list - arr - map method\n      <div>\n        <Fade bottom cascade={true}>\n          {!this.props.products ? (\n            <div>Loading...</div>\n          ) : (\n            <ul className='products'>\n              {this.props.products.map((product) => (\n                // //get list of products as props from parent comp\n                <li key={product._id}>\n                  <div className='product'>\n                    <a\n                      href={'#' + product._id}\n                      onClick={() => this.openModal(product)}\n                    >\n                      <img src={product.image} alt={product.title}></img>\n                      <p>{product.title}</p>\n                    </a>\n                    <div className='product-price'>\n                      <div>{formatCurrency(product.price)}</div>\n                      <button\n                        className='button-primary'\n                        onClick={() => this.props.addToCart(product)}\n                        className=\"button primary\"\n                      >\n                        Add To Cart\n                      </button>\n                    </div>\n                  </div>\n                </li>\n              ))}\n            </ul>\n          )}\n        </Fade>\n        {product && ( //when there's a product this modal is rendered ** also make sure to create a button to close it using 'x'\n          <Modal isOpen={true} onRequestClose={this.closeModal}>\n            <Zoom>\n              <button className='close-modal' onClick={this.closeModal}>\n                x\n              </button>\n              <div className='product-details'>\n                <img src={product.image} alt={product.title}></img>\n                <div className='product-details-description'>\n                  <p>\n                    <strong>{product.title}</strong>\n                  </p>\n\n                  <p>{product.description}</p>\n\n                  <p>\n                    Available Sizes:{' '}\n                    {product.availableSizes.map((x) =>(//availableSizes is an array\n                        <span>\n                          {' '}\n                          <button className='button'>{x}</button>\n                        </span>\n                      ))}\n                  </p>\n\n                  <div className='product-price'>\n                    <div>{formatCurrency(product.price)}</div>\n                    <button\n                      className='button primary'\n                      onClick={() => {\n                        //before closingModal make sure have this.props.addToCart method\n                        this.props.addToCart(product);\n                        this.closeModal();\n                      }}\n                    >\n                      Add To Cart\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </Zoom>\n          </Modal>\n        )}\n      </div>\n    );\n  }\n}\nexport default connect((state) => ({ products: state.products.items }), {\n  fetchProducts,\n})(Products);\n\n//TO CONNECT PRODUCTS.JS TO STORE\n//CONNECT FUNCTION defines\n"]},"metadata":{},"sourceType":"module"}