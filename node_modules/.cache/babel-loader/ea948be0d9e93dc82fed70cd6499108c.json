{"ast":null,"code":"var _jsxFileName = \"/Users/faribadadko/Documents/FunWear\\uD83C\\uDF3CFashion/funwear-front-end/src/components/Products.js\";\nimport React, { Component } from 'react';\nimport formatCurrency from '../util';\nimport Fade from 'react-reveal/Fade';\nimport Modal from 'react-modal';\nimport Zoom from 'react-reveal/Zoom';\nimport { connect } from 'react-redux';\nimport { fetchProducts } from '../actions/productActions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Products extends Component {\n  constructor(props) {\n    super(props);\n\n    this.openModal = product => {\n      this.setState({\n        product\n      });\n    };\n\n    this.closeModal = () => {\n      this.setState({\n        product: null\n      });\n    };\n\n    this.state = {\n      product: null\n    };\n  }\n\n  componentDidMount() {\n    this.props.fetchProducts();\n  }\n\n  render() {\n    const {\n      product\n    } = this.state;\n    console.log(this.props.products);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Fade, {\n        bottom: true,\n        cascade: true,\n        children: !this.props.products ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"products\",\n          children: this.props.products.map(product => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"product\",\n              children: [/*#__PURE__*/_jsxDEV(\"a\", {\n                href: '#' + product._id,\n                onClick: () => this.openModal(product),\n                children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                  src: product.image,\n                  alt: product.title\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 42,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: product.title\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 43,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 38,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"product-price\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  children: formatCurrency(product.price)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 46,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => this.props.addToCart(product),\n                  className: \"button primary\",\n                  children: \"Add To Cart\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 47,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 45,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 37,\n              columnNumber: 19\n            }, this)\n          }, product._id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), product && /*#__PURE__*/_jsxDEV(Modal, {\n        isOpen: true,\n        onRequestClose: this.closeModal,\n        children: /*#__PURE__*/_jsxDEV(Zoom, {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"close-modal\",\n            onClick: this.closeModal,\n            children: \"x\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"product-details\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: product.image,\n              alt: product.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"product-details-description\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: product.title\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 70,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 69,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: product.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 72,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Avaiable Sizes:\", ' ', product.availableSizes.map(x => /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: [' ', /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"button\",\n                    children: x\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 78,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 76,\n                  columnNumber: 23\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 73,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"product-price\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  children: formatCurrency(product.price)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 83,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"button primary\",\n                  onClick: () => {\n                    this.props.addToCart(product);\n                    this.closeModal();\n                  },\n                  children: \"Add To Cart\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 84,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 82,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default connect(state => ({\n  products: state.products.items\n}), {\n  fetchProducts\n})(Products); // import React, { Component } from 'react';\n// import formatCurrency from '../util';\n// import Fade from 'react-reveal/Fade';\n// import Modal from 'react-modal';\n// import Zoom from 'react-reveal/Zoom';\n// import { connect } from 'react-redux';\n// import { fetchProducts } from '../actions/productActions';\n// //for modals we need to have 2 state show or hide\n// class Products extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       product: null,\n//       //if product exists show it else if null do not show modal\n//       //create an onClick for image === HAS TO BE AN ARROW FUNC\n//       //openModal takes parameter (product) and prefix with this\n//       //we need a method function openModal\n//     };\n//   }\n//   componentDidMount(){//call fetchProducts from props\n//     this.props.fetchProducts();\n//   }\n//   openModal = (product) => {\n//     this.setState({ product });\n//     //by running this we set as the product of the stat of the component\n//   };\n//   closeModal = () => {\n//     this.setState({ product: null });\n//   };\n//   render() {\n//     const { product } = this.state; //use constructor assignment\n//     return (\n//       //implement product list - arr - map method\n//       <div>\n//         <Fade bottom cascade={true}>\n//           {!this.props.products ? (\n//             <div>Loading...</div>\n//           ) : ( //conditional rendering => if\n//             <ul className='products'>\n//               {this.props.products.map((product) => (\n//                 // //get list of products as props from parent comp\n//                 <li key={product._id}>\n//                   <div className='product'>\n//                     <a\n//                       href={'#' + product._id}\n//                       onClick={() => this.openModal(product)}\n//                     >\n//                       <img src={product.image} alt={product.title}></img>\n//                       <p>{product.title}</p>\n//                     </a>\n//                     <div className='product-price'>\n//                       <div>{formatCurrency(product.price)}</div>\n//                       <button\n//                         className='button-primary'\n//                         onClick={() => this.props.addToCart(product)}\n//                         className=\"button primary\"\n//                       >\n//                         Add To Cart\n//                       </button>\n//                     </div>\n//                   </div>\n//                 </li>\n//               ))}\n//             </ul>\n//           )}\n//         </Fade>\n//         {product && ( //when there's a product this modal is rendered ** also make sure to create a button to close it using 'x'\n//           <Modal isOpen={true} onRequestClose={this.closeModal}>\n//             <Zoom>\n//               <button className='close-modal' onClick={this.closeModal}>\n//                 x\n//               </button>\n//               <div className='product-details'>\n//                 <img src={product.image} alt={product.title}></img>\n//                 <div className='product-details-description'>\n//                   <p>\n//                     <strong>{product.title}</strong>\n//                   </p>\n//                   <p>{product.description}</p>\n//                   <p>\n//                     Available Sizes:{' '}\n//                     {product.availableSizes.map((x) =>(//availableSizes is an array\n//                         <span>\n//                           {' '}\n//                           <button className='button'>{x}</button>\n//                         </span>\n//                       ))}\n//                   </p>\n//                   <div className='product-price'>\n//                     <div>{formatCurrency(product.price)}</div>\n//                     <button\n//                       className='button primary'\n//                       onClick={() => {\n//                         //before closingModal make sure have this.props.addToCart method\n//                         this.props.addToCart(product);\n//                         this.closeModal();\n//                       }}\n//                     >\n//                       Add To Cart\n//                     </button>\n//                   </div>\n//                 </div>\n//               </div>\n//             </Zoom>\n//           </Modal>\n//         )}\n//       </div>\n//     );\n//   }\n// }\n// //redux part\n// export default connect((state) => ({ products: state.products.items }), { //getting access to list of products coming from server\n//   fetchProducts,\n// })(Products);\n\n/*\nCONNECT is a function that takes 2 params\n1. function that accepts state and => return an obj that defines which part of redux state are we going to use === products === state.products\n2. list of actions\n\nconnect func => returns another function which as paramter takes the component that we are connecting here ==== Product/js\n\nin JSON.data we need to set a proxy\nserver is localhost:5000\n*/","map":{"version":3,"sources":["/Users/faribadadko/Documents/FunWear🌼Fashion/funwear-front-end/src/components/Products.js"],"names":["React","Component","formatCurrency","Fade","Modal","Zoom","connect","fetchProducts","Products","constructor","props","openModal","product","setState","closeModal","state","componentDidMount","render","console","log","products","map","_id","image","title","price","addToCart","description","availableSizes","x","items"],"mappings":"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":["import React, { Component } from 'react';\nimport formatCurrency from '../util';\nimport Fade from 'react-reveal/Fade';\nimport Modal from 'react-modal';\nimport Zoom from 'react-reveal/Zoom';\nimport { connect } from 'react-redux';\nimport { fetchProducts } from '../actions/productActions';\n\nclass Products extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      product: null,\n    };\n  }\n  componentDidMount() {\n    this.props.fetchProducts();\n  }\n  openModal = (product) => {\n    this.setState({ product });\n  };\n  closeModal = () => {\n    this.setState({ product: null });\n  };\n  render() {\n    const { product } = this.state;\n    console.log(this.props.products);\n    return (\n      <div>\n        <Fade bottom cascade>\n          {!this.props.products ? (\n            <div>Loading...</div>\n          ) : (\n            <ul className='products'>\n              {this.props.products.map((product) => (\n                <li key={product._id}>\n                  <div className='product'>\n                    <a\n                      href={'#' + product._id}\n                      onClick={() => this.openModal(product)}\n                    >\n                      <img src={product.image} alt={product.title}></img>\n                      <p>{product.title}</p>\n                    </a>\n                    <div className='product-price'>\n                      <div>{formatCurrency(product.price)}</div>\n                      <button\n                        onClick={() => this.props.addToCart(product)}\n                        className='button primary'\n                      >\n                        Add To Cart\n                      </button>\n                    </div>\n                  </div>\n                </li>\n              ))}\n            </ul>\n          )}\n        </Fade>\n        {product && (\n          <Modal isOpen={true} onRequestClose={this.closeModal}>\n            <Zoom>\n              <button className='close-modal' onClick={this.closeModal}>\n                x\n              </button>\n              <div className='product-details'>\n                <img src={product.image} alt={product.title}></img>\n                <div className='product-details-description'>\n                  <p>\n                    <strong>{product.title}</strong>\n                  </p>\n                  <p>{product.description}</p>\n                  <p>\n                    Avaiable Sizes:{' '}\n                    {product.availableSizes.map((x) => (\n                      <span>\n                        {' '}\n                        <button className='button'>{x}</button>\n                      </span>\n                    ))}\n                  </p>\n                  <div className='product-price'>\n                    <div>{formatCurrency(product.price)}</div>\n                    <button\n                      className='button primary'\n                      onClick={() => {\n                        this.props.addToCart(product);\n                        this.closeModal();\n                      }}\n                    >\n                      Add To Cart\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </Zoom>\n          </Modal>\n        )}\n      </div>\n    );\n  }\n}\nexport default connect((state) => ({ products: state.products.items }), {\n  fetchProducts,\n})(Products);\n\n// import React, { Component } from 'react';\n// import formatCurrency from '../util';\n// import Fade from 'react-reveal/Fade';\n// import Modal from 'react-modal';\n// import Zoom from 'react-reveal/Zoom';\n// import { connect } from 'react-redux';\n// import { fetchProducts } from '../actions/productActions';\n\n// //for modals we need to have 2 state show or hide\n// class Products extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       product: null,\n//       //if product exists show it else if null do not show modal\n//       //create an onClick for image === HAS TO BE AN ARROW FUNC\n//       //openModal takes parameter (product) and prefix with this\n//       //we need a method function openModal\n//     };\n//   }\n//   componentDidMount(){//call fetchProducts from props\n//     this.props.fetchProducts();\n//   }\n//   openModal = (product) => {\n//     this.setState({ product });\n//     //by running this we set as the product of the stat of the component\n//   };\n//   closeModal = () => {\n//     this.setState({ product: null });\n//   };\n//   render() {\n//     const { product } = this.state; //use constructor assignment\n//     return (\n//       //implement product list - arr - map method\n//       <div>\n//         <Fade bottom cascade={true}>\n//           {!this.props.products ? (\n//             <div>Loading...</div>\n//           ) : ( //conditional rendering => if\n//             <ul className='products'>\n//               {this.props.products.map((product) => (\n//                 // //get list of products as props from parent comp\n//                 <li key={product._id}>\n//                   <div className='product'>\n//                     <a\n//                       href={'#' + product._id}\n//                       onClick={() => this.openModal(product)}\n//                     >\n//                       <img src={product.image} alt={product.title}></img>\n//                       <p>{product.title}</p>\n//                     </a>\n//                     <div className='product-price'>\n//                       <div>{formatCurrency(product.price)}</div>\n//                       <button\n//                         className='button-primary'\n//                         onClick={() => this.props.addToCart(product)}\n//                         className=\"button primary\"\n//                       >\n//                         Add To Cart\n//                       </button>\n//                     </div>\n//                   </div>\n//                 </li>\n//               ))}\n//             </ul>\n//           )}\n//         </Fade>\n//         {product && ( //when there's a product this modal is rendered ** also make sure to create a button to close it using 'x'\n//           <Modal isOpen={true} onRequestClose={this.closeModal}>\n//             <Zoom>\n//               <button className='close-modal' onClick={this.closeModal}>\n//                 x\n//               </button>\n//               <div className='product-details'>\n//                 <img src={product.image} alt={product.title}></img>\n//                 <div className='product-details-description'>\n//                   <p>\n//                     <strong>{product.title}</strong>\n//                   </p>\n\n//                   <p>{product.description}</p>\n\n//                   <p>\n//                     Available Sizes:{' '}\n//                     {product.availableSizes.map((x) =>(//availableSizes is an array\n//                         <span>\n//                           {' '}\n//                           <button className='button'>{x}</button>\n//                         </span>\n//                       ))}\n//                   </p>\n\n//                   <div className='product-price'>\n//                     <div>{formatCurrency(product.price)}</div>\n//                     <button\n//                       className='button primary'\n//                       onClick={() => {\n//                         //before closingModal make sure have this.props.addToCart method\n//                         this.props.addToCart(product);\n//                         this.closeModal();\n//                       }}\n//                     >\n//                       Add To Cart\n//                     </button>\n//                   </div>\n//                 </div>\n//               </div>\n//             </Zoom>\n//           </Modal>\n//         )}\n//       </div>\n//     );\n//   }\n// }\n// //redux part\n// export default connect((state) => ({ products: state.products.items }), { //getting access to list of products coming from server\n//   fetchProducts,\n// })(Products);\n\n/*\nCONNECT is a function that takes 2 params\n1. function that accepts state and => return an obj that defines which part of redux state are we going to use === products === state.products\n2. list of actions\n\nconnect func => returns another function which as paramter takes the component that we are connecting here ==== Product/js\n\nin JSON.data we need to set a proxy\nserver is localhost:5000\n*/\n"]},"metadata":{},"sourceType":"module"}