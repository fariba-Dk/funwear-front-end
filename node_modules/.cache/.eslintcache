[{"/Users/faribadadko/Documents/My-projects/FunWearðŸŒ¼Fashion/funwear-front-end/src/index.js":"1","/Users/faribadadko/Documents/My-projects/FunWearðŸŒ¼Fashion/funwear-front-end/src/App.js":"2","/Users/faribadadko/Documents/My-projects/FunWearðŸŒ¼Fashion/funwear-front-end/src/components/Products.js":"3","/Users/faribadadko/Documents/My-projects/FunWearðŸŒ¼Fashion/funwear-front-end/src/components/Filter.js":"4","/Users/faribadadko/Documents/My-projects/FunWearðŸŒ¼Fashion/funwear-front-end/src/components/Cart.js":"5","/Users/faribadadko/Documents/My-projects/FunWearðŸŒ¼Fashion/funwear-front-end/src/util.js":"6"},{"size":395,"mtime":1624382240850,"results":"7","hashOfConfig":"8"},{"size":5689,"mtime":1624983545524,"results":"9","hashOfConfig":"8"},{"size":4857,"mtime":1624983545355,"results":"10","hashOfConfig":"8"},{"size":1272,"mtime":1624471735924,"results":"11","hashOfConfig":"8"},{"size":7978,"mtime":1624983545355,"results":"12","hashOfConfig":"8"},{"size":145,"mtime":1624400596439,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"17ynkpv",{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/faribadadko/Documents/My-projects/FunWearðŸŒ¼Fashion/funwear-front-end/src/index.js",[],"/Users/faribadadko/Documents/My-projects/FunWearðŸŒ¼Fashion/funwear-front-end/src/App.js",["28"],"import React from 'react';\n// import data from './data.json';\nimport Products from './components/Products';\nimport Filter from './components/Filter';\nimport Cart from './components/Cart';\nimport './index.css';\nimport axios from 'axios';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      products: [],\n      //by default there is no item in cart\n      //cartItems: [], we change JSON.parse to reverse JSON.stringify\n      cartItems: localStorage.getItem('cartItems')\n        ? JSON.parse(localStorage.getItem('cartItems'))\n        : [], //else empty array\n      //have to check if string cartItems exists => parse it, else []\n      size: '', //filter thru all sizes\n      sort: '', //sort thru $ and $$$\n      order: {},\n    };\n  }\n  async componentDidMount() {\n    try{\n      const { data } = await axios.get('/api/products');\n      this.setState({\n      products: data,\n    });\n    }catch(error){\n      console.log(error)\n    }\n  }\n  //parent component is responsible for saving the order\n  createOrder = (order) => {\n    axios.post('/api/orders', order).then((resp) =>\n      this.setState({\n        order: resp.data,\n      })\n    );\n  };\n\n  //SORT METHOD ON LOWEST/HIGHEST/NEWEST\n  sortProducts = (event) => {\n    //function used to handle onchange event for sorting\n    //CONVERTING TO CHANGE FUNC TO METHOD FUNC WE CAN ACCESS THIS.SET-STATE\n    const sort = event.target.value;\n    console.log(event.target.value);\n    this.setState((state) => ({\n      sort: sort,\n      //need to get access to filtered product\n      //create a clone of array\n      products: this.state.products.slice().sort((a, b) =>\n        sort === 'lowest'\n          ? a.price > b.price\n            ? 1\n            : -1\n          : sort === 'highest'\n          ? a.price < b.price\n            ? 1\n            : -1\n          : //newest _id is greater num than the oldest one\n          a._id < b._id\n          ? 1\n          : -1\n      ),\n    }));\n  };\n\n  //FILTER METHOD ON SIZE\n  filterProducts = (event) => {\n    //function handling onchange event thru filtering thru the sizes\n    //CONVERTING TO CHANGE FUNC TO METHOD FUNC WE CAN ACCESS THIS.SET-STATE\n    //THE VALUE OF SIZE IS event.target.value\n    let size = event.target.value;\n    if (size === '') {\n      this.setState({\n        size: size,\n      });\n    } else {\n      this.setState({\n        size: size,\n        //for products using filter method\n        //checking for size! if > 0 => the size exists\n        products: this.state.products.filter(\n          (product) => product.availableSizes.indexOf(size) >= 0\n        ),\n      });\n    }\n  };\n\n  //ADD TO CART - method\n  addToCart = (product) => {\n    //clone-copy of cartItems using slice\n    const cartItems = this.state.cartItems.slice();\n    let alreadyInCart = false;\n    //using forEach arr method to iterate over cartItems arr\n    cartItems.forEach((item) => {\n      //if _id exists then ++\n      if (item._id === product._id) {\n        item.count++;\n        //set flag to true\n        alreadyInCart = true;\n      }\n    });\n    //if prod is not in the cart => push the prod inside cart\n    if (!alreadyInCart) {\n      //instead of having product we are using the fields of prods using spread to get the fields - an instance of this product\n      cartItems.push({ ...product, count: 1 });\n    } //after adding new items we need to update state\n    this.setState({ cartItems });\n    //to make the cart stay PRESERVED => after adding items and setting state, use setItem(key: string, value: string) but since cartItems is an OBJECT so we use JSON.stringify to convert obj to string AS WELL AS REMOVING THE ITEMS TOO\n    //this.state\n    localStorage.setItem('cartItems', JSON.stringify(this.state.cartItems));\n  };\n\n  //REMOVE FROM CART\n  removeFromCart = (product) => {\n    //create a copy -an instance of cartItems\n    const cartItems = this.state.cartItems.slice();\n    this.setState({\n      cartItems: cartItems.filter((x) => x._id !== product._id),\n    }); //have to preserve the cart for remove as well\n    localStorage.setItem(\n      'cartItems',\n      //this is the value that we set inside the cart item on l ine 104\n      JSON.stringify(cartItems.filter((x) => x._id !== product._id))\n    );\n  };\n\n  render() {\n    return (\n      <div className='grid-container'>\n        <header>\n          <a href='/'>FunWearðŸŒ¼Fashion</a>\n          <a href='#' alt='admin'>\n            Admin\n          </a>\n        </header>\n        <main>\n          <div className='content'>\n            <div className='main'>\n              <Filter\n                //passing count & sort & size as props to Filter\n                count={this.state.products.length}\n                sort={this.state.sort}\n                size={this.state.size}\n                // functions handling onChange events\n                sortProducts={this.sortProducts}\n                filterProducts={this.filterProducts}\n              ></Filter>\n              <Products\n                products={this.state.products}\n                //adding we define addToCart as a property\n                //this.addToCart is responsible for it\n                addToCart={this.addToCart}\n              ></Products>\n            </div>\n            <div className='sidebar'>\n              <Cart\n                //the cartItems comes from this.state.cartItems\n                cartItems={this.state.cartItems}\n                order={this.state.order}\n                removeFromCart={this.removeFromCart}\n                createOrder={this.createOrder}\n              />\n            </div>\n          </div>\n        </main>\n        <footer>Â© FunWearðŸŒ¼Fashion</footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","/Users/faribadadko/Documents/My-projects/FunWearðŸŒ¼Fashion/funwear-front-end/src/components/Products.js",["29"],"import React, { Component } from 'react';\nimport formatCurrency from '../util';\nimport Fade from 'react-reveal/Fade';\nimport Modal from 'react-modal';\nimport Zoom from 'react-reveal/Zoom';\n\n//for modals we need to have 2 state show or hide\nexport default class Products extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      product: null,\n      //if product exists show it else if null do not show modal\n      //create an onClick for image === HAS TO BE AN ARROW FUNC\n      //openModal takes parameter (product) and prefix with this\n      //we need a method function openModal\n      showPromo: true,\n    };\n  }\n  // componentDidMount(){//call fetchProducts from props\n  //   this.props.fetchProducts();\n  // }\n  openModal = (product) => {\n    this.setState({ product });\n    //by running this we set as the product of the stat of the component\n  };\n  closeModal = () => {\n    this.setState({ product: null });\n  };\n  render() {\n    const { product, showPromo } = this.state; //use constructor assignment\n    return (\n      //implement product list - arr - map method\n      <div>\n        <Modal className=\"promo\" isOpen={showPromo} style={{ textAlign: 'center' }}>\n          <button onClick={() => this.setState({ showPromo: false })}>x</button>\n          <img\n            src='/images/discount-pic.gif'\n            alt='discount promo'\n            style={{ width: '100%' }}\n          />\n        </Modal>\n        <Fade bottom cascade={true}>\n          <ul className='products'>\n            {this.props.products.map((product) => (\n              // //get list of products as props from parent comp\n              <li key={product._id}>\n                <div className='product'>\n                  <a\n                    href={'#' + product._id}\n                    onClick={() => this.openModal(product)}\n                  >\n                    <img src={product.image} alt={product.title}></img>\n                    <p>{product.title}</p>\n                  </a>\n                  <div className='product-price'>\n                    <div>{formatCurrency(product.price)}</div>\n                    <button\n                      className='button-primary'\n                      onClick={() => this.props.addToCart(product)}\n                      className='button primary'\n                    >\n                      Add To Cart\n                    </button>\n                  </div>\n                </div>\n              </li>\n            ))}\n          </ul>\n        </Fade>\n        {product && ( //when there's a product this modal is rendered ** also make sure to create a button to close it using 'x'\n          <Modal isOpen={true} onRequestClose={this.closeModal}>\n            <Zoom>\n              <button className='close-modal' onClick={this.closeModal}>\n                x\n              </button>\n              <div className='product-details'>\n                <img src={product.image} alt={product.title}></img>\n                <div className='product-details-description'>\n                  <p>\n                    <strong>{product.title}</strong>\n                  </p>\n\n                  <p>{product.description}</p>\n\n                  <p>\n                    Available Sizes:{' '}\n                    {product.availableSizes.map(\n                      (\n                        x //availableSizes is an array\n                      ) => (\n                        <span>\n                          {' '}\n                          <button className='button'>{x}</button>\n                        </span>\n                      )\n                    )}\n                  </p>\n\n                  <div className='product-price'>\n                    <div>{formatCurrency(product.price)}</div>\n                    <button\n                      className='button primary'\n                      onClick={() => {\n                        //before closingModal make sure have this.props.addToCart method\n                        this.props.addToCart(product);\n                        this.closeModal();\n                      }}\n                    >\n                      Add To Cart\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </Zoom>\n          </Modal>\n        )}\n      </div>\n    );\n  }\n}\n//redux part\n// export default connect((state) => ({ products: state.products.items }), { //getting access to list of products coming from server\n//   fetchProducts,\n// })(Products);\n\n/*\nCONNECT is a function that takes 2 params\n1. function that accepts state and => return an obj that defines which part of redux state are we going to use === products === state.products\n2. list of actions\n\nconnect func => returns another function which as paramter takes the component that we are connecting here ==== Product/js\n\nin JSON.data we need to set a proxy\nserver is localhost:5000\n*/\n","/Users/faribadadko/Documents/My-projects/FunWearðŸŒ¼Fashion/funwear-front-end/src/components/Filter.js",[],"/Users/faribadadko/Documents/My-projects/FunWearðŸŒ¼Fashion/funwear-front-end/src/components/Cart.js",[],"/Users/faribadadko/Documents/My-projects/FunWearðŸŒ¼Fashion/funwear-front-end/src/util.js",[],{"ruleId":"30","severity":1,"message":"31","line":137,"column":11,"nodeType":"32","endLine":137,"endColumn":35},{"ruleId":"33","severity":1,"message":"34","line":61,"column":23,"nodeType":"35","messageId":"36","endLine":61,"endColumn":49},"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps"]