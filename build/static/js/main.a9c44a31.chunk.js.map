{"version":3,"sources":["util.js","components/Products.js","components/Filter.js","components/Cart.js","App.js","index.js"],"names":["formatCurrency","num","Number","toFixed","toLocaleString","Products","props","openModal","product","setState","closeModal","state","showPromo","this","className","isOpen","style","textAlign","onClick","src","alt","width","bottom","cascade","products","map","href","_id","image","title","price","addToCart","onRequestClose","description","availableSizes","x","Component","Filter","count","value","sort","onChange","sortProducts","size","filterProducts","Cart","handleInput","event","target","name","createOrder","preventDefault","order","email","address","cartItems","total","reduce","acc","cur","showCheckout","length","createdAt","left","item","removeFromCart","a","c","right","onSubmit","type","required","App","axios","post","then","resp","data","console","log","slice","b","filter","indexOf","alreadyInCart","forEach","push","localStorage","setItem","JSON","stringify","getItem","parse","get","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a9c44a31.chunk.js","sourcesContent":["export default function formatCurrency(num){\n  return '$' + Number(num.toFixed(2)).toLocaleString() + \" \";\n}\n//format currency inside component \n","import React, { Component } from 'react';\nimport formatCurrency from '../util';\nimport Fade from 'react-reveal/Fade';\nimport Modal from 'react-modal';\nimport Zoom from 'react-reveal/Zoom';\n\n//for modals we need to have 2 state show or hide\nexport default class Products extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      product: null,\n      //if product exists show it else if null do not show modal\n      //create an onClick for image === HAS TO BE AN ARROW FUNC\n      //openModal takes parameter (product) and prefix with this\n      //we need a method function openModal\n      showPromo: true,\n    };\n  }\n  // componentDidMount(){//call fetchProducts from props\n  //   this.props.fetchProducts();\n  // }\n  openModal = (product) => {\n    this.setState({ product });\n    //by running this we set as the product of the stat of the component\n  };\n  closeModal = () => {\n    this.setState({ product: null });\n  };\n  render() {\n    const { product, showPromo } = this.state; //use constructor assignment\n    return (\n      //implement product list - arr - map method\n      <div>\n        <Modal className=\"promo\" isOpen={showPromo} style={{ textAlign: 'center' }}>\n          <button onClick={() => this.setState({ showPromo: false })}>x</button>\n          <img\n            src='/images/discount-pic.gif'\n            alt='discount promo'\n            style={{ width: '100%' }}\n          />\n        </Modal>\n        <Fade bottom cascade={true}>\n          <ul className='products'>\n            {this.props.products.map((product) => (\n              // //get list of products as props from parent comp\n              <li key={product._id}>\n                <div className='product'>\n                  <a\n                    href={'#' + product._id}\n                    onClick={() => this.openModal(product)}\n                  >\n                    <img src={product.image} alt={product.title}></img>\n                    <p>{product.title}</p>\n                  </a>\n                  <div className='product-price'>\n                    <div>{formatCurrency(product.price)}</div>\n                    <button\n                      className='button-primary'\n                      onClick={() => this.props.addToCart(product)}\n                      className='button primary'\n                    >\n                      Add To Cart\n                    </button>\n                  </div>\n                </div>\n              </li>\n            ))}\n          </ul>\n        </Fade>\n        {product && ( //when there's a product this modal is rendered ** also make sure to create a button to close it using 'x'\n          <Modal isOpen={true} onRequestClose={this.closeModal}>\n            <Zoom>\n              <button className='close-modal' onClick={this.closeModal}>\n                x\n              </button>\n              <div className='product-details'>\n                <img src={product.image} alt={product.title}></img>\n                <div className='product-details-description'>\n                  <p>\n                    <strong>{product.title}</strong>\n                  </p>\n\n                  <p>{product.description}</p>\n\n                  <p>\n                    Available Sizes:{' '}\n                    {product.availableSizes.map(\n                      (\n                        x //availableSizes is an array\n                      ) => (\n                        <span>\n                          {' '}\n                          <button className='button'>{x}</button>\n                        </span>\n                      )\n                    )}\n                  </p>\n\n                  <div className='product-price'>\n                    <div>{formatCurrency(product.price)}</div>\n                    <button\n                      className='button primary'\n                      onClick={() => {\n                        //before closingModal make sure have this.props.addToCart method\n                        this.props.addToCart(product);\n                        this.closeModal();\n                      }}\n                    >\n                      Add To Cart\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </Zoom>\n          </Modal>\n        )}\n      </div>\n    );\n  }\n}\n//redux part\n// export default connect((state) => ({ products: state.products.items }), { //getting access to list of products coming from server\n//   fetchProducts,\n// })(Products);\n\n/*\nCONNECT is a function that takes 2 params\n1. function that accepts state and => return an obj that defines which part of redux state are we going to use === products === state.products\n2. list of actions\n\nconnect func => returns another function which as paramter takes the component that we are connecting here ==== Product/js\n\nin JSON.data we need to set a proxy\nserver is localhost:5000\n*/\n","import React, { Component } from 'react';\n\n\nexport default class Filter extends Component {\n  //dummy component which handles Sort and filter for any onChange event and passes to App.js\n  render() {\n    return (\n      <div className='filter'>\n        {/* We need have count of prods, sorting prods latest, lowest and highest, filter sizes */}\n        <div className=\"filter-result\">{this.props.count} Products</div>\n        {/* sortProducts function handles sort for $,$$$ comes from <FILTER> from App.js</FILTER>*/}\n        <div className=\"filter-sort\">Order <select value={this.props.sort} onChange={this.props.sortProducts}>\n          <option>Latest</option>\n          <option value=\"lowest\">Lowest</option>\n          <option value=\"highest\">Highest</option>\n        </select></div>\n        {/* filterProducts function handles filtering size FROM App.js <Filter> */}\n        <div className=\"filter-size\">Filter<select value={this.props.size} onChange={this.props.filterProducts}>\n          <option value=\"\">All</option>\n          <option value=\"XS\">XS</option>\n          <option value=\"S\">S</option>\n          <option value=\"M\">M</option>\n          <option value=\"L\">L</option>\n          <option value=\"XL\">XL</option>\n        </select></div>\n      </div>\n    )\n  }\n}\n\n","import React, { Component } from 'react';\nimport formatCurrency from '../util';\nimport Fade from 'react-reveal/Fade';\nimport Modal from 'react-modal';\nimport Zoom from 'react-reveal/Zoom';\n\nexport default class Cart extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n      email: '',\n      address: '',\n      showCheckout: false, //by default we do not like to show checkout unless user click on Proceed\n    };\n  }\n  handleInput = (event) => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n  //onSubmit handler - we use preventDefault because we don't want to refresh the page when user is clicking on submit\n  createOrder = (event) => {\n    event.preventDefault();\n    const order = {\n      name: this.state.name,\n      email: this.state.email,\n      address: this.state.address,\n      cartItems: this.props.cartItems,\n      total: this.props.cartItems.reduce(\n        (acc, cur) => acc + cur.price * cur.count,\n        0\n      ),\n    };\n    this.setState({ showCheckout: true });\n    this.props.createOrder(order); //pass in order object = this is not responsible for saving this the PARENT at App.js should\n  };\n  closeModal = () => {\n    this.setState({ showCheckout: false });\n  };\n  render() {\n    const { showCheckout } = this.state;\n    const { cartItems, order } = this.props; //destructuring assignment\n    //from parent component,we get cartItems here, if method\n    return (\n      <div>\n        {cartItems.length === 0 ? ( //1st div: showing cart-data\n          //if cartItem is empty\n          //using 2 className here 1. cart 2. cart-header\n          <div className='cart cart-header'>Your cart is empty</div>\n        ) : (\n          //else if cart is not empty => show num of items\n          <div className='cart cart-header'>\n            You have {cartItems.length} items in your cart{' '}\n          </div>\n        )}\n        {order.email && (\n          <Modal isOpen={showCheckout}>\n            <Zoom>\n              <button className='close-modal' onClick={this.closeModal}>\n                x\n              </button>\n              <div className='order-details'>\n                <h3 className='success-message'>Your order has been placed.</h3>\n                <h2>Order {order._id}</h2>\n                <ul>\n                  <li>\n                    <div>Name:</div>\n                    <div>{order.name}</div>\n                  </li>\n                  <li>\n                    <div>Email:</div>\n                    <div>{order.email}</div>\n                  </li>\n                  <li>\n                    <div>Address:</div>\n                    <div>{order.address}</div>\n                  </li>\n                  <li>\n                    <div>Date:</div>\n                    <div>{order.createdAt}</div>\n                  </li>\n\n                  <li>\n                    <div>Total:</div>\n                    <div>{formatCurrency(order.total || 0)}</div>\n                  </li>\n                  <li>\n                    <div>Cart Items:</div>\n                    <div>\n                      {order.cartItems &&\n                        order.cartItems.map((x) => (\n                          <div>\n                            {x.count} {' x '} {x.title}\n                          </div>\n                        ))}\n                    </div>\n                  </li>\n                </ul>\n              </div>\n            </Zoom>\n          </Modal>\n        )}\n        <div>\n          <div className='cart'>\n            <Fade left cascade>\n              <ul className='cart-items'>\n                {cartItems.map(\n                  (\n                    item //2nd div: showing cart-data\n                  ) => (\n                    //we map thru cartItems and convert cartItems to li elms; here we set key=item._id and inside the li we need to form rows for: image & title & price - all with dif <div> + a button to remove any items - IMP: make it an arrow func\n                    //NOTE: we use item which is element of cartItems not the cartItems itself\n                    <li key={item._id}>\n                      <div>\n                        <img src={item.image} alt={item.title}></img>\n                      </div>\n                      <div>\n                        <div>{item.title}</div>\n                        <div className='right'>\n                          {formatCurrency(item.price)} x {item.count}{' '}\n                          <button\n                            className='button'\n                            onClick={() => this.props.removeFromCart(item)}\n                          >\n                            Remove\n                          </button>\n                        </div>\n                      </div>\n                    </li>\n                  )\n                )}\n              </ul>\n            </Fade>\n          </div>\n          {cartItems.length !== 0 && ( //this allows for hidden button => use conditional rendering=> if !== 0 else its empty\n            <div>\n              <div className='cart'>\n                <div className='total'>\n                  <div>\n                    Total:{' '}\n                    {formatCurrency(\n                      //use reduce method to add price and use formatCurrency\n                      cartItems.reduce((a, c) => a + c.price * c.count, 0)\n                    )}\n                  </div>\n                  <button\n                    onClick={() => {\n                      //when user click on button Proceed, we need to update === setState to true ** make sure to add to this.state in constructor showCheckout: false === we do not want to show check out by default\n                      this.setState({ showCheckout: true });\n                    }}\n                    className='button primary'\n                  >\n                    Proceed\n                  </button>\n                </div>\n              </div>\n              {this.state.showCheckout && ( //if it is true => proceed to <div and create FORM and an onSubmit button\n                <Fade right cascade>\n                  <div className='cart'>\n                    <form onSubmit={this.createOrder}>\n                      <ul className='form-container'>\n                        <li>\n                          <label>Email</label>\n                          <input\n                            name='email'\n                            type='email'\n                            required //it is required and onChange we define a function to handle input\n                            //when user click on handle input we need to create a function handleInput\n                            //a method function that accepts an event and we can access\n                            onChange={this.handleInput}\n                          ></input>\n                        </li>\n                        <li>\n                          <label>Name</label>\n                          <input\n                            name='name'\n                            type='text'\n                            required //it is required and onChange we define a function to handle input\n                            onChange={this.handleInput}\n                          ></input>\n                        </li>\n                        <li>\n                          <label>Address</label>\n                          <input\n                            name='address'\n                            type='text'\n                            required\n                            onChange={this.handleInput}\n                          ></input>\n                        </li>\n                        <li>\n                          <button className='button primary' type='submit'>\n                            Checkout\n                          </button>\n                        </li>\n                      </ul>\n                    </form>\n                  </div>\n                </Fade>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\n// import data from './data.json';\nimport Products from './components/Products';\nimport Filter from './components/Filter';\nimport Cart from './components/Cart';\nimport './index.css';\nimport axios from 'axios';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      products: [],\n      //by default there is no item in cart\n      //cartItems: [], we change JSON.parse to reverse JSON.stringify\n      cartItems: localStorage.getItem('cartItems')\n        ? JSON.parse(localStorage.getItem('cartItems'))\n        : [], //else empty array\n      //have to check if string cartItems exists => parse it, else []\n      size: '', //filter thru all sizes\n      sort: '', //sort thru $ and $$$\n      order: {},\n    };\n  }\n  async componentDidMount() {\n    const { data } = await axios.get('/api/products');\n    this.setState({\n      products: data,\n    });\n  }\n  //parent component is responsible for saving the order\n  createOrder = (order) => {\n    axios.post('/api/orders', order).then((resp) =>\n      this.setState({\n        order: resp.data,\n      })\n    );\n  };\n\n  //SORT METHOD ON LOWEST/HIGHEST/NEWEST\n  sortProducts = (event) => {\n    //function used to handle onchange event for sorting\n    //CONVERTING TO CHANGE FUNC TO METHOD FUNC WE CAN ACCESS THIS.SET-STATE\n    const sort = event.target.value;\n    console.log(event.target.value);\n    this.setState((state) => ({\n      sort: sort,\n      //need to get access to filtered product\n      //create a clone of array\n      products: this.state.products.slice().sort((a, b) =>\n        sort === 'lowest'\n          ? a.price > b.price\n            ? 1\n            : -1\n          : sort === 'highest'\n          ? a.price < b.price\n            ? 1\n            : -1\n          : //newest _id is greater num than the oldest one\n          a._id < b._id\n          ? 1\n          : -1\n      ),\n    }));\n  };\n\n  //FILTER METHOD ON SIZE\n  filterProducts = (event) => {\n    //function handling onchange event thru filtering thru the sizes\n    //CONVERTING TO CHANGE FUNC TO METHOD FUNC WE CAN ACCESS THIS.SET-STATE\n    //THE VALUE OF SIZE IS event.target.value\n    let size = event.target.value;\n    if (size === '') {\n      this.setState({\n        size: size,\n      });\n    } else {\n      this.setState({\n        size: size,\n        //for products using filter method\n        //checking for size! if > 0 => the size exists\n        products: this.state.products.filter(\n          (product) => product.availableSizes.indexOf(size) >= 0\n        ),\n      });\n    }\n  };\n\n  //ADD TO CART - method\n  addToCart = (product) => {\n    //clone-copy of cartItems using slice\n    const cartItems = this.state.cartItems.slice();\n    let alreadyInCart = false;\n    //using forEach arr method to iterate over cartItems arr\n    cartItems.forEach((item) => {\n      //if _id exists then ++\n      if (item._id === product._id) {\n        item.count++;\n        //set flag to true\n        alreadyInCart = true;\n      }\n    });\n    //if prod is not in the cart => push the prod inside cart\n    if (!alreadyInCart) {\n      //instead of having product we are using the fields of prods using spread to get the fields - an instance of this product\n      cartItems.push({ ...product, count: 1 });\n    } //after adding new items we need to update state\n    this.setState({ cartItems });\n    //to make the cart stay PRESERVED => after adding items and setting state, use setItem(key: string, value: string) but since cartItems is an OBJECT so we use JSON.stringify to convert obj to string AS WELL AS REMOVING THE ITEMS TOO\n    //this.state\n    localStorage.setItem('cartItems', JSON.stringify(this.state.cartItems));\n  };\n\n  //REMOVE FROM CART\n  removeFromCart = (product) => {\n    //create a copy -an instance of cartItems\n    const cartItems = this.state.cartItems.slice();\n    this.setState({\n      cartItems: cartItems.filter((x) => x._id !== product._id),\n    }); //have to preserve the cart for remove as well\n    localStorage.setItem(\n      'cartItems',\n      //this is the value that we set inside the cart item on l ine 104\n      JSON.stringify(cartItems.filter((x) => x._id !== product._id))\n    );\n  };\n\n  render() {\n    return (\n      <div className='grid-container'>\n        <header>\n          <a href='/'>FunWear🌼Fashion</a>\n          <a href='#' alt='admin'>\n            Admin\n          </a>\n        </header>\n        <main>\n          <div className='content'>\n            <div className='main'>\n              <Filter\n                //passing count & sort & size as props to Filter\n                count={this.state.products.length}\n                sort={this.state.sort}\n                size={this.state.size}\n                // functions handling onChange events\n                sortProducts={this.sortProducts}\n                filterProducts={this.filterProducts}\n              ></Filter>\n              <Products\n                products={this.state.products}\n                //adding we define addToCart as a property\n                //this.addToCart is responsible for it\n                addToCart={this.addToCart}\n              ></Products>\n            </div>\n            <div className='sidebar'>\n              <Cart\n                //the cartItems comes from this.state.cartItems\n                cartItems={this.state.cartItems}\n                order={this.state.order}\n                removeFromCart={this.removeFromCart}\n                createOrder={this.createOrder}\n              />\n            </div>\n          </div>\n        </main>\n        <footer>© FunWear🌼Fashion</footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\"\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App/>, document.getElementById('root'))\n\n\n\n\n\n// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import './index.css';\n// import App from './App';\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n"],"sourceRoot":""}