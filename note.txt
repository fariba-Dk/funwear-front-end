




coupon tag
 <img src='public/images/discount-pic.gif' alt=""></img>

Cart Commponent
1. Create Cart Component in src

2. ~~~~~ in Product.js
3. Handle 'Add To Cart' to this.props.addToCart(product)

4. ~~~~~~ in App.js
5. Add cartItems to state as []
6. Create addToCart(product)
7. Slice, Check product, if exists add to cartItems using forEach method
8. Set a flag alreadyInCart = false
9. push to cartItems the item and use spread-operator to get a field of product and add an instance of this product with a count=1 to cartItems
10. Finally setState to update the state

 ~~~~~~ in Cart.js
11. Define cartItems, order form this.props
12. Check cartItems.length and show "message"
13. List cartItems {cartItems.length > 0 && ()}
14. index.css adjustments
15. Style cart, cart-header and cart-items (img, li)

16. Use LocalStorage on App constructor to load cart itmes (JSON.parse)
17. Use LocalStorage on addToCart to save cart items (JSON.stringify)

~~~~~~~~~~~~~~~ Checkout Form ~~~~~~~~~~~~~~

-- Cart.js
1. Make cart items to stay preserved when we refresh the page
2. Use LocalStorage on addToCart to save cart items (JSON.stringify)

3. Handle Click on Process
4. Update showCheckout state to true on click

5. Conditional rendering Checkout Form
6. Get client info - Email, Name, Address input
7. Define Checkout Button
8. Handle onSubmit Form Event by this.createOrder
9. Create order object and pass to parent to handle it
10. Publish changes

~~~~~~~~~~~ Animations ~~~~~~~~~~~~  npm install react-reveal
1. Loading animation but->top
****  <Fade bottom cascade={true}> allows to have products load one by one

2. Adding an item to cart L->R


3. Proceed R->L
4. Zoom animatiion on single photo

1. Install react-reaveal
2. Create fade effect from bottom to top for products
3. Creat fade left for add to cart
4. Create fade right for show checkout form

~~~~~~~~~~~ Modal ~~~~~~~~~~~~  npm install react-Modal
5. install react-Modal // Open images by clicking on image
- Product.js
6. Import Modal
7. Set state for product tonull
8. Define openModel and close Modal
9. Show Modal if product exist
10. Create Modal
11. Create Zoom effect
-- index.css




~~~~~ O R D E R

1. backend - server.js
2. create a model - mongoose
  get/api/order
  post/api/order
  delete/api/order




You should definitely keep the proxy file to test on localhost, to deploy you just need to add lines like this to your `server.js` (example here https://github.com/hpr/tweet-only-access/blob/main/server/index.js):

app.use(express.static(path.join(__dirname, "../funwear-front-end/build")));
app.get("*", (req, res) => {
  res.sendFile(path.join(__dirname, "../funwear-front-end/build", "index.html"));
});

Then just make sure you have a suitable deploy script like this https://github.com/hpr/tweet-only-access/blob/main/deploy.sh that does `npm run build` on your front end before deploying, it can get complicated when you have a separate front+back end but is totally possible, would be happy to schedule another meeting if you can't figure it out
Harry
















































~~~~~ What is Redux? ~~~~~
-we got list of products from server dabut now we get from
redux store.

-in react we get list of product from parent App.js
But in redux is going to BE the parent component
-redux makes the state predictable and
-manage multiple states together in STORE

work-flow OF REDUX

1. need to call an action and create action creator
2. action creator dispatches STORE

3. In STIORE {
  1. current state
  2. bunch of REDUCERS
  }
4. based on ACTIONs we dispatched to the STORE, different REDUCERS are FIRED and CHANGE state to another state

5. Store updates the view --list of products.
we send AJAX request in store. in reducing is ONLY modifying state

~~~~~ Add Redux ~~~~
1. npm install redux react-redux redux-thunk
2. import redux
3. set initial state
4. create types

-in types.js
5. define FETCH_PRODUCTS
6. actions/productActions.js






































important dependencies for ecommerce
npm install @material-ui/core @material-ui/icons @chec/commerce.js @stripe/react-stripe-js @stripe/stripe-js

@stripe/stripe-js react-router-dom react-hook-form

